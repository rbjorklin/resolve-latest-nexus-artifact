{
  "name": "resolveLatest",
  "type": "groovy",
  "content": "import org.sonatype.nexus.repository.storage.Query;
              import org.sonatype.nexus.repository.storage.StorageFacet;

              def argRepo = args.split(',')[0];
              def argName = args.split(',')[1];
              def argGroup = args.split(',')[2];

              def repo = repository.repositoryManager.get(argRepo as String);
              def tx = repo.facet(StorageFacet).txSupplier().get();

              def versionComparator = { a, b ->
                def VALID_TOKENS = /.-/;
                a = a.tokenize(VALID_TOKENS);
                b = b.tokenize(VALID_TOKENS);

                for (i in 0..<Math.max(a.size(), b.size())) {
                  if (i == a.size()) {
                    return b[i].isInteger() ? -1 : 1
                  } else if (i == b.size()) {
                    return a[i].isInteger() ? 1 : -1
                  };

                  if (a[i].isInteger() && b[i].isInteger()) {
                    int c = (a[i] as int) <=> (b[i] as int);
                    if (c != 0) {
                      return c
                    };
                  } else if (a[i].isInteger()) {
                    return 1
                  } else if (b[i].isInteger()) {
                    return -1
                  } else {
                    int c = a[i] <=> b[i];
                    if (c != 0) {
                      return c;
                    };
                  };
                };

                return 0;
              };

              def doubleVersionComparator = { a, b ->
                  def highestBaseVersion = versionComparator(a[0], b[0]);
                  if (highestBaseVersion == 0) {
                    return versionComparator(a[1], b[1]);
                  } else {
                    return highestBaseVersion;
                  };
              };

              def found;
              try {
                  tx.begin();
                  def components = tx.findComponents(Query.builder()
                          .where('name=').param(argName as String).build(), [repo]);
                  matches = components.findAll{
                        it.attributes().child('maven2').get('groupId') == argGroup as String
                  };
                  found = matches.collect {
                      [it.attributes().child('maven2').get('baseVersion'),
                      it.attributes().child('maven2').get('version')];
                  };
                  found = found.unique();
                  tx.commit();
              } catch (Exception e) {
                  log.warn('Transaction failed {}', e.toString());
                  tx.rollback();
              } finally {
                  tx.close();
              };
              return found.max(doubleVersionComparator);"
}
